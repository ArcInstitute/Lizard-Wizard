process {
    errorStrategy = { task.exitStatus in ((130..145) + 104 + 125) ? "retry" : "finish" }
    maxRetries    = 0
    maxErrors     = "-1"

    cpus = { check_max( 1, "cpus" ) }
    memory = { check_max( 6.GB, "memory" ) }
    time = { check_max( 2.h, "time" ) }

    // conda envs
    withLabel:caiman_env {
        conda = "envs/caiman.yml"        
    }
    withLabel:cellpose_env {
        conda = "envs/cellpose.yml"
    }
    withLabel:summary_env {
        conda = "envs/summary.yml"
    }
    withLabel:wizards_staff_env {
        conda = "envs/wizards_staff.yml"
    }

    // resources
    withName:WIZARDS_STAFF {
        cpus = { check_max(calc_dff_f0_log_count > 48 ? 48 : calc_dff_f0_log_count, "cpus") }
        memory = { check_max( 16.GB * task.attempt, "memory" ) }
        time = { check_max( 6.h * task.attempt, "time" ) }
    }
    withLabel:process_low {
        cpus = { check_max( 4, "cpus" ) }
        memory = { check_max( 12.GB * task.attempt, "memory" ) }
        time = { check_max( 4.h * task.attempt, "time" ) }
    }
    withLabel:process_low_cpu {
        cpus = { check_max( 12, "cpus" ) }
        memory = { check_max( 12.GB * task.attempt, "memory" ) }
        time = { check_max( 4.h * task.attempt, "time" ) }
    }
    withLabel:process_low_mem {
        cpus = { check_max( 4, "cpus" ) }
        memory = { check_max( 36.GB * task.attempt, "memory" ) }
        time = { check_max( 4.h * task.attempt, "time" ) }
    }
    withLabel:process_medium {
        cpus = { check_max( 8, "cpus" ) }
        memory = { check_max( 48.GB * task.attempt, "memory" ) }
        time = { check_max( 8.h * task.attempt, "time" ) }
    }
    withLabel:process_medium_mem {
        cpus = { check_max( 1, "cpus" ) }
        memory = { check_max( 80.GB * task.attempt, "memory" ) }
        time = { check_max( 8.h * task.attempt, "time" ) }
    }
    withLabel:process_high {
        cpus = { check_max( 24, "cpus" ) }
        memory = { check_max( 156.GB * task.attempt, "memory" ) }
        time = { check_max( 12.h * task.attempt, "time" ) }
    }
    withLabel:process_highest {
        cpus = { check_max( 14 + 4 * task.attempt, "cpus" ) }
        memory = { check_max( 64.GB + 48.GB * task.attempt, "memory" ) }
        time = { check_max( 6.h + 4.h * task.attempt, "time" ) }
    }
    env.HOME           = { task.workDir.toString() }
    env.TMPDIR         = { "${task.workDir}/tmp" }
    env.TMP            = { "${task.workDir}/tmp" }
    env.XDG_CACHE_HOME = { "${task.workDir}/.cache" }
    env.MPLCONFIGDIR   = { "${task.workDir}/.mpl" }
    env.NUMBA_CACHE_DIR= { "${task.workDir}/.numba_cache" }
    env.FONTCONFIG_PATH = { "${task.workDir}/.fontconfig" }
    env.NUMBA_DISABLE_CACHING = '1'
    env.HDMF_CACHE_DIR = { "${task.workDir}/.hdmf_cache" }
    env.PYNWB_CACHE_DIR = { "${task.workDir}/.pynwb_cache" }

    beforeScript = '''
        # Set safe defaults if vars are unset or empty
        : "${XDG_CACHE_HOME:=$PWD/.cache}"
        : "${MPLCONFIGDIR:=$PWD/.mpl}"
        : "${NUMBA_CACHE_DIR:=$PWD/.numba_cache}"
        : "${FONTCONFIG_PATH:=$PWD/.fontconfig}"
        : "${TMPDIR:=$PWD/tmp}"
        : "${TMP:=$PWD/tmp}"
        : "${HDMF_CACHE_DIR:=$PWD/.hdmf_cache}"
        : "${PYNWB_CACHE_DIR:=$PWD/.pynwb_cache}"
        
        mkdir -p "$XDG_CACHE_HOME" "$MPLCONFIGDIR" "$NUMBA_CACHE_DIR" "$FONTCONFIG_PATH" "$TMPDIR" "$HDMF_CACHE_DIR" "$PYNWB_CACHE_DIR"
    '''
}